name: Build and Release Datapack

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
          
    - name: Set up variables
      run: |
        echo "VERSION=1.0" >> $GITHUB_ENV
        echo "MC_VERSION=1.21.8" >> $GITHUB_ENV
        PATCH_VERSION=${{ github.run_number }}
        echo "PATCH_VERSION=${PATCH_VERSION}" >> $GITHUB_ENV
        echo "FULL_VERSION=1.0.${PATCH_VERSION}" >> $GITHUB_ENV
        echo "DATAPACK_NAME=EmptyOverworld_1.0.${PATCH_VERSION}_1.21.8" >> $GITHUB_ENV
        
    - name: Create datapack zip
      run: |
        cd EmptyOverworld
        zip -r ../${{ env.DATAPACK_NAME }}.zip pack.mcmeta data/
        echo "Created ${{ env.DATAPACK_NAME }}.zip"
        ls -la ../${{ env.DATAPACK_NAME }}.zip
        echo "Zip contents:"
        unzip -l ../${{ env.DATAPACK_NAME }}.zip
        
    - name: Upload datapack artifact
      uses: actions/upload-artifact@v4
      with:
        name: datapack-zip
        path: ${{ env.DATAPACK_NAME }}.zip
        
    - name: Generate release notes
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      id: release_notes
      run: |
        # Get the previous tag to find commits since last release
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        if [ -z "$PREVIOUS_TAG" ]; then
          # If no previous tag, get all commits
          COMMITS=$(git log --oneline --pretty=format:"- %s" HEAD)
        else
          # Get commits since the previous tag
          COMMITS=$(git log --oneline --pretty=format:"- %s" ${PREVIOUS_TAG}..HEAD)
        fi
        
        # Create the release body
        cat << EOF > release_body.md
        ## EmptyOverworld Datapack v${{ env.FULL_VERSION }}
        
        **Minecraft Version:** ${{ env.MC_VERSION }}
        
        ### Changes
        $COMMITS
        
        ### Installation
        1. Download the \`${{ env.DATAPACK_NAME }}.zip\` file
        2. Place it in your world's \`datapacks\` folder
        3. Run \`/reload\` in-game
        EOF
        
        # Output the body for the release action
        echo "body<<EOF" >> $GITHUB_OUTPUT
        cat release_body.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release (on push to main)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ env.FULL_VERSION }}
        name: EmptyOverworld v${{ env.FULL_VERSION }}
        body: ${{ steps.release_notes.outputs.body }}
        files: ${{ env.DATAPACK_NAME }}.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
